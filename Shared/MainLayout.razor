@using Snipster.Services;
@using Blazored.Toast

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider 
@inject CustomAuthenticationStateProvider CustomAuthProvider
@inject ProtectedLocalStorage ProtectedLocalStorage

@inherits LayoutComponentBase



<PageTitle>Snipster</PageTitle>



<div class="page">
    @if (!IsAuthPage)
    {
        <div class="sidebar">
            <NavMenu />
        </div>
    }
    <main>
        <div class="top-row px-4">
            <div class="top-links">
                
                <AuthorizeView>
                    <Authorized>
                        <div class="icon-group">
                            <NavLink href="/user/edit" class="icon-link">
                                <i class="fas fa-user-edit"></i>
                                <span class="tooltip">Edit User Details</span>
                            </NavLink>

                            <NavLink href="/user/password" class="icon-link password">
                                <i class="fas fa-key"></i>
                                <span class="tooltip password">Change Password</span>
                            </NavLink>

                            <div class="icon-link logout-container" @onclick="Logout">
                                <i class="fas fa-sign-out-alt logout-icon"></i>
                                <span class="tooltip">Logout</span>
                            </div>
                        </div>
                    </Authorized>
                </AuthorizeView>
            </div>
        </div>

        <article class="content px-4">
            @Body   
            <BlazoredToasts />
        </article>
    </main>
</div>


@code {
    private bool IsAuthPage => Navigation.Uri.Contains("login", StringComparison.OrdinalIgnoreCase)
                         || Navigation.Uri.Contains("register", StringComparison.OrdinalIgnoreCase)
                         || Navigation.Uri.Contains("reset", StringComparison.OrdinalIgnoreCase);

    private async Task Logout()
    {
        await CustomAuthProvider.LogoutAsync();
        await ProtectedLocalStorage.DeleteAsync("userLoginData"); //delete login data from local storage
        Navigation.NavigateTo("/login", true);
    }
}

<style>
    .top-links {
        display: flex;
        justify-content: center;
    }

    .icon-group {
        display: flex;
        align-items: center;
        gap: 30px; /* Ensures equal spacing */
    }

    .icon-link {
        display: flex;
        align-items: center;
        position: relative;
        cursor: pointer;
    }

    .logout-container {
        cursor: pointer;
    }

    /* Tooltip styling */
    .tooltip {
        position: absolute; /* Prevents tooltip from affecting spacing */
        bottom: -25px;
        left: 50%;
        transform: translateX(-50%);
        background-color: black;
        color: white;
        text-align: center;
        padding: 5px 10px;
        border-radius: 5px;
        font-size: 12px;
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
        pointer-events: none;
    }

    .icon-link:hover .tooltip,
    .logout-container:hover .tooltip {
        opacity: 1;
    }

    /* Icon styling */
    .fas {
        font-size: 20px;
        color: #555;
        transition: color 0.3s ease-in-out;
    }

    .icon-link:hover .fas {
        color: #007bff;
    }

    .logout-container:hover .fas {
        color: red;
    }

    .password {
        margin-left: -1px !important;
        margin-right: 5px !important;
    }
</style>